// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  hashedPassword       String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  invitationsFamilyIds String[]  @default([]) @db.ObjectId

  familyIds String[]  @default([]) @db.ObjectId
  families  Family[]  @relation("members", fields: [familyIds], references: [id])
  Account   Account[]
  Family    Family[]  @relation("admin")
  Task      Task[]

  invites Family[] @relation("invites", fields: [invitationsFamilyIds], references: [id])
}

model Pet {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  image       String?
  dateOfBirth DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  familyId String @db.ObjectId
  Task     Task[]

  Family Family @relation("owner", fields: [familyId], references: [id])

  ignore String[] @default([]) @db.ObjectId
  family Family[] @relation("pets", fields: [ignore], references: [id])
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Task {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String     @default("")
  petId     String     @db.ObjectId
  userId    String     @db.ObjectId
  familyId  String     @db.ObjectId
  status    TaskStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  pet    Pet    @relation(fields: [petId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  family Family @relation(fields: [familyId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Family {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId String @db.ObjectId
  admin   User   @relation("admin", fields: [adminId], references: [id])

  membersIds    String[] @default([]) @db.ObjectId
  familyMembers User[]   @relation("members", fields: [membersIds], references: [id])

  petIds String[] @default([]) @db.ObjectId
  pets   Pet[]    @relation("pets", fields: [petIds], references: [id])

  invitationToUserIds String[] @default([]) @db.ObjectId
  invitationToUser    User[]   @relation("invites", fields: [invitationToUserIds], references: [id])
  Task                Task[]
  Pet                 Pet[]    @relation("owner")
}
